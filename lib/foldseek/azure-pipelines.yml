# https://aka.ms/yaml

trigger:
  - master

variables:
    regression: 1

jobs:
  - job: build_ubuntu_2004
    displayName: Ubuntu 2004
    pool:
      vmImage: 'Ubuntu-20.04'
    timeoutInMinutes: 120
    strategy:
      matrix:
        avx2:
          SIMD: 'AVX2'
          STATIC: 1
          MPI: 0
          BUILD_TYPE: RelWithDebInfo
        # sse41:
        #   SIMD: 'SSE4_1'
        #   STATIC: 1
        #   MPI: 0
        #   BUILD_TYPE: RelWithDebInfo
        sse2:
          SIMD: 'SSE2'
          STATIC: 1
          MPI: 0
          BUILD_TYPE: RelWithDebInfo
        avx2_mpi:
          SIMD: 'AVX2'
          STATIC: 0
          MPI: 1
          BUILD_TYPE: RelWithDebInfo
        asan:
          SIMD: 'AVX2'
          STATIC: 0
          MPI: 0
          BUILD_TYPE: ASanOpt
    steps:
      - checkout: self
        submodules: true
      - script: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install -y gcc-11 g++-11 libgcc-11-dev rustc cargo build-essential
        displayName: Install newer GCC
      - script: |
          sudo apt-get update
          sudo apt-get -y install mpi-default-dev mpi-default-bin
        displayName: Install Dependencies
        condition: eq(variables['MPI'], 1)
      - script: |
          mkdir build && cd build
          export CC=gcc-11 ; export CXX=g++-11
          if [ "${STATIC}" -eq "1" ]; then
              cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILD_SHARED_LIBS=OFF \
                -DCMAKE_EXE_LINKER_FLAGS="-static -static-libgcc \
                -static-libstdc++" -DCMAKE_FIND_LIBRARY_SUFFIXES=".a" \
                -DENABLE_WERROR=1 -DHAVE_${SIMD}=1 -DHAVE_MPI=${MPI} ..
          else
              cmake -DHAVE_SANITIZER=1 -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
                -DENABLE_WERROR=1 -DHAVE_${SIMD}=1 -DHAVE_MPI=${MPI} ..
          fi

          make -j $(nproc --all)
        displayName: Build foldseek
      - script: |
          cd ${BUILD_SOURCESDIRECTORY}
          ./regression/run_regression.sh ./build/src/foldseek examples 
        displayName: Run Regression Suite
        condition: eq(variables['regression'], 1)
      - task: PublishPipelineArtifact@0
        condition: eq(variables['STATIC'], 1)
        inputs:
          targetPath: $(Build.SourcesDirectory)/build/src/foldseek
          artifactName: foldseek-linux-$(SIMD)

  - job: build_ubuntu_cross_2004
    displayName: Ubuntu 2004 Cross-Compile
    pool:
      vmImage: 'Ubuntu-20.04'
    strategy:
      matrix:
        arm64:
          SIMD: ARM8
          ARCH: arm64
          CPREF: aarch64
    steps:
      - script: |
          sudo dpkg --add-architecture $ARCH
          cat << HEREDOC | sudo tee /etc/apt/sources.list
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu/ focal main universe multiverse
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu/ focal-updates main universe multiverse
          deb [arch=amd64,i386] http://archive.ubuntu.com/ubuntu/ focal-backports main universe multiverse
          deb [arch=amd64,i386] http://security.ubuntu.com/ubuntu/ focal-security main universe multiverse
          deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports/ focal main  universe multiverse
          deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports/ focal-updates main universe multiverse
          deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports/ focal-backports main universe multiverse
          deb [arch=$ARCH] http://ports.ubuntu.com/ubuntu-ports/ focal-security main universe multiverse
          HEREDOC
          sudo apt-get update
          sudo apt-get -y install -o APT::Immediate-Configure=false crossbuild-essential-$ARCH zlib1g-dev:$ARCH libbz2-dev:$ARCH
          rustup target add ${CPREF}-unknown-linux-gnu
        displayName: Install Toolchain
      - script: |
          mkdir build && cd build
          CC=${CPREF}-linux-gnu-gcc CXX=${CPREF}-linux-gnu-g++ \
           cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DHAVE_TESTS=1 \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_EXE_LINKER_FLAGS="-static -static-libgcc \
            -static-libstdc++" -DCMAKE_FIND_LIBRARY_SUFFIXES=".a" \
            -DRust_CARGO_TARGET=${CPREF}-unknown-linux-gnu \
            -DENABLE_WERROR=1 -DHAVE_${SIMD}=1 ..
          make -j $(nproc --all)
        displayName: Build foldseek
      - task: PublishPipelineArtifact@0
        inputs:
          targetPath: $(Build.SourcesDirectory)/build/src/foldseek
          artifactName: foldseek-linux-$(SIMD)

  - job: build_macos
    displayName: macOS
    pool:
      vmImage: 'macos-12'
    steps:
      - checkout: self
        submodules: true
      - script: |
          rustup update
          rustup target install x86_64-apple-darwin
          rustup target install aarch64-apple-darwin
        displayName: Install Rust Toolchain
      - script: |
          cd ${BUILD_SOURCESDIRECTORY}
          ./util/build_osx.sh . build foldseek
        displayName: Build foldseek
      - script: |
          cd ${BUILD_SOURCESDIRECTORY}
          ./regression/run_regression.sh ./build/foldseek examples 
        displayName: Run Regression Suite
        condition: eq(variables['regression'], 1)
      - task: PublishPipelineArtifact@0
        inputs:
          targetPath: $(Build.SourcesDirectory)/build/foldseek
          artifactName: foldseek-darwin-universal

  - job: upload_artifacts
    displayName: Upload Artifacts
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn:
      - build_macos
      - build_ubuntu_2004
      - build_ubuntu_cross_2004
    steps:
      - script: |
          cd "${BUILD_SOURCESDIRECTORY}"
          mkdir foldseek
          cp -f README.md LICENCE.md foldseek
          mkdir foldseek/bin
      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: foldseek-darwin-universal
          targetPath: $(Build.SourcesDirectory)/foldseek/bin
      - script:
          chmod +x "${BUILD_SOURCESDIRECTORY}/foldseek/bin/foldseek"
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: $(Build.SourcesDirectory)/foldseek
          archiveFile: $(Build.SourcesDirectory)/foldseek-osx-universal.tar.gz
          includeRootFolder: true
          archiveType: tar
      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: foldseek-linux-SSE2
          targetPath: $(Build.SourcesDirectory)/foldseek/bin
      - script:
          chmod +x "${BUILD_SOURCESDIRECTORY}/foldseek/bin/foldseek"
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: $(Build.SourcesDirectory)/foldseek
          archiveFile: $(Build.SourcesDirectory)/foldseek-linux-sse2.tar.gz
          includeRootFolder: true
          archiveType: tar
      # - task: DownloadPipelineArtifact@1
      #   inputs:
      #     artifactName: foldseek-linux-SSE4_1
      #     targetPath: $(Build.SourcesDirectory)/foldseek/bin
      # - script:
      #     chmod +x "${BUILD_SOURCESDIRECTORY}/foldseek/bin/foldseek"
      # - task: ArchiveFiles@2
      #   inputs:
      #     rootFolderOrFile: $(Build.SourcesDirectory)/foldseek
      #     archiveFile: $(Build.SourcesDirectory)/foldseek-linux-sse41.tar.gz
      #     includeRootFolder: true
      #     archiveType: tar
      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: foldseek-linux-AVX2
          targetPath: $(Build.SourcesDirectory)/foldseek/bin
      - script:
          chmod +x "${BUILD_SOURCESDIRECTORY}/foldseek/bin/foldseek"
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: $(Build.SourcesDirectory)/foldseek
          archiveFile: $(Build.SourcesDirectory)/foldseek-linux-avx2.tar.gz
          includeRootFolder: true
          archiveType: tar
      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: foldseek-linux-ARM8
          targetPath: $(Build.SourcesDirectory)/foldseek/bin
      - script:
          chmod +x "${BUILD_SOURCESDIRECTORY}/foldseek/bin/foldseek"
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: $(Build.SourcesDirectory)/foldseek
          archiveFile: $(Build.SourcesDirectory)/foldseek-linux-arm64.tar.gz
          includeRootFolder: true
          archiveType: tar
      # - task: DownloadPipelineArtifact@1
      #   inputs:
      #     artifactName: foldseek-linux-POWER8
      #     targetPath: $(Build.SourcesDirectory)/foldseek/bin
      # - script:
      #     chmod +x "${BUILD_SOURCESDIRECTORY}/foldseek/bin/foldseek"
      # - task: ArchiveFiles@2
      #   inputs:
      #     rootFolderOrFile: $(Build.SourcesDirectory)/foldseek
      #     archiveFile: $(Build.SourcesDirectory)/foldseek-linux-ppc64le-POWER8.tar.gz
      #     includeRootFolder: true
      #     archiveType: tar
      # - task: DownloadPipelineArtifact@1
      #   inputs:
      #     artifactName: foldseek-linux-POWER9
      #     targetPath: $(Build.SourcesDirectory)/foldseek/bin
      # - script:
      #     chmod +x "${BUILD_SOURCESDIRECTORY}/foldseek/bin/foldseek"
      # - task: ArchiveFiles@2
      #   inputs:
      #     rootFolderOrFile: $(Build.SourcesDirectory)/foldseek
      #     archiveFile: $(Build.SourcesDirectory)/foldseek-linux-ppc64le-POWER9.tar.gz
      #     includeRootFolder: true
      #     archiveType: tar
      - task: DownloadSecureFile@1
        inputs:
          secureFile: azure_upload_foldseek
        displayName: Get Deployment Key
      - script: |
          mkdir ~/.ssh && mv $DOWNLOADSECUREFILE_SECUREFILEPATH ~/.ssh/id_rsa
          chmod 700 ~/.ssh && chmod 600 ~/.ssh/id_rsa
          ssh-keygen -f ~/.ssh/id_rsa -y > ~/.ssh/id_rsa.pub
          cd "${BUILD_SOURCESDIRECTORY}"
          # disabled:foldseek-linux-sse41.tar.gz foldseek-linux-ppc64le-POWER8.tar.gz foldseek-linux-ppc64le-POWER9.tar.gz
          ssh-keygen -Y sign -f ~/.ssh/id_rsa -n file \
             foldseek-osx-universal.tar.gz \
             foldseek-linux-sse2.tar.gz \
             foldseek-linux-avx2.tar.gz \
             foldseek-linux-arm64.tar.gz
          curl --retry 5 --retry-all-errors -X POST \
            -F file[]=@foldseek-osx-universal.tar.gz -F signature[]=@foldseek-osx-universal.tar.gz.sig \
            -F file[]=@foldseek-linux-sse2.tar.gz -F signature[]=@foldseek-linux-sse2.tar.gz.sig \
            -F file[]=@foldseek-linux-avx2.tar.gz -F signature[]=@foldseek-linux-avx2.tar.gz.sig \
            -F file[]=@foldseek-linux-arm64.tar.gz -F signature[]=@foldseek-linux-arm64.tar.gz.sig \
            -F identifier="foldseek" -F directory="${BUILD_SOURCEVERSION}" \
              https://mmseqs.com/upload
